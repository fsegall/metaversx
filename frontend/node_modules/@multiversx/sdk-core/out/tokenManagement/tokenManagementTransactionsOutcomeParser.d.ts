import { Address } from "../core/address";
import { TransactionOnNetwork } from "../core/transactionOnNetwork";
import { ChangeToDynamicOutput, MintNftOutput, ModifyingCreatorOutput, ModifyRoyaltiesOutput, RegisterDynamicOutput, SetNewUrisOutput, SpecialRoleOutput, UpdateAttibutesOutput } from "./resources";
export declare class TokenManagementTransactionsOutcomeParser {
    constructor();
    parseIssueFungible(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseIssueNonFungible(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseIssueSemiFungible(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseRegisterMetaEsdt(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseRegisterAndSetAllRoles(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
        roles: string[];
    }[];
    parseSetBurnRoleGlobally(transaction: TransactionOnNetwork): void;
    parseUnsetBurnRoleGlobally(transaction: TransactionOnNetwork): void;
    parseSetSpecialRole(transaction: TransactionOnNetwork): SpecialRoleOutput[];
    private getOutputForSetSpecialRoleEvent;
    parseNftCreate(transaction: TransactionOnNetwork): MintNftOutput[];
    private getOutputForNftCreateEvent;
    parseLocalMint(transaction: TransactionOnNetwork): {
        userAddress: Address;
        tokenIdentifier: string;
        nonce: bigint;
        mintedSupply: bigint;
    }[];
    private getOutputForLocalMintEvent;
    parseLocalBurn(transaction: TransactionOnNetwork): {
        userAddress: Address;
        tokenIdentifier: string;
        nonce: bigint;
        burntSupply: bigint;
    }[];
    private getOutputForLocalBurnEvent;
    parsePause(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseUnpause(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
    }[];
    parseFreeze(transaction: TransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForFreezeEvent;
    parseUnfreeze(transaction: TransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForUnfreezeEvent;
    parseWipe(transaction: TransactionOnNetwork): {
        userAddress: string;
        tokenIdentifier: string;
        nonce: bigint;
        balance: bigint;
    }[];
    private getOutputForWipeEvent;
    parseUpdateAttributes(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        attributes: Uint8Array;
    }[];
    private getOutputForUpdateAttributesEvent;
    parseAddQuantity(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        addedQuantity: bigint;
    }[];
    private getOutputForAddQuantityEvent;
    parseBurnQuantity(transaction: TransactionOnNetwork): {
        tokenIdentifier: string;
        nonce: bigint;
        burntQuantity: bigint;
    }[];
    private getOutputForBurnQuantityEvent;
    parseModifyRoyalties(transaction: TransactionOnNetwork): ModifyRoyaltiesOutput[];
    private getOutputForESDTModifyRoyaltiesEvent;
    parseSetNewUris(transaction: TransactionOnNetwork): SetNewUrisOutput[];
    private getOutputForESDTSetNewURIsEvent;
    parseModifyCreator(transaction: TransactionOnNetwork): ModifyingCreatorOutput[];
    private getOutputForESDTModifyCreatorEvent;
    parseUpdateMetadata(transaction: TransactionOnNetwork): UpdateAttibutesOutput[];
    private getOutputForESDTUpdateMetadataEvent;
    parseMetadataRecreate(transaction: TransactionOnNetwork): UpdateAttibutesOutput[];
    private getOutputForESDTMetadataRecreateEvent;
    parseChangeTokenToDynamic(transaction: TransactionOnNetwork): ChangeToDynamicOutput[];
    private getOutputForChangeToDynamicEvent;
    parseRegisterDynamicToken(transaction: TransactionOnNetwork): RegisterDynamicOutput[];
    private getOutputForRegisterDynamicToken;
    parseRegisterDynamicTokenAndSettingRoles(transaction: TransactionOnNetwork): RegisterDynamicOutput[];
    private getOutputForRegisterDynamicTokenAndSettingRoles;
    private ensureNoError;
    private extractTokenIdentifier;
    private extractNonce;
    private extractAmount;
    private extractAddress;
    private decodeTopicAsString;
}
