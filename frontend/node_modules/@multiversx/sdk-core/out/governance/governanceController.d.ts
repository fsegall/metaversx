import { Address, BaseController, BaseControllerInput, IAccount, Transaction, TransactionOnNetwork } from "../core";
import { INetworkProvider } from "../networkProviders";
import { ChangeConfigInput, ClearEndedProposalsInput, CloseProposalInput, CloseProposalOutcome, DelegatedVoteInfo, GovernanceConfig, NewProposalInput, NewProposalOutcome, ProposalInfo, VoteOutcome, VoteProposalInput } from "./resources";
export declare class GovernanceController extends BaseController {
    private readonly governanceFactory;
    private readonly parser;
    private readonly smartContractController;
    private readonly governanceContract;
    private readonly transactionAwaiter;
    private readonly addressHrp;
    private readonly serializer;
    constructor(options: {
        chainID: string;
        networkProvider: INetworkProvider;
        addressHrp?: string;
    });
    createTransactionForNewProposal(sender: IAccount, nonce: bigint, options: NewProposalInput & BaseControllerInput): Promise<Transaction>;
    parseNewProposal(transaction: TransactionOnNetwork): NewProposalOutcome[];
    awaitCompletedProposeProposal(txHash: string): Promise<NewProposalOutcome[]>;
    createTransactionForVoting(sender: IAccount, nonce: bigint, options: VoteProposalInput & BaseControllerInput): Promise<Transaction>;
    parseVote(transaction: TransactionOnNetwork): VoteOutcome[];
    awaitCompletedVote(txHash: string): Promise<VoteOutcome[]>;
    createTransactionForClosingProposal(sender: IAccount, nonce: bigint, options: CloseProposalInput & BaseControllerInput): Promise<Transaction>;
    parseCloseProposal(transaction: TransactionOnNetwork): CloseProposalOutcome[];
    awaitCompletedCloseProposal(txHash: string): Promise<CloseProposalOutcome[]>;
    createTransactionForClearingEndedProposals(sender: IAccount, nonce: bigint, options: ClearEndedProposalsInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForClaimingAccumulatedFees(sender: IAccount, nonce: bigint, options: BaseControllerInput): Promise<Transaction>;
    createTransactionForChangingConfig(sender: IAccount, nonce: bigint, options: ChangeConfigInput & BaseControllerInput): Promise<Transaction>;
    getVotingPower(address: Address): Promise<bigint>;
    getConfig(): Promise<GovernanceConfig>;
    getProposal(proposalNonce: number): Promise<ProposalInfo>;
    getDelegatedVoteInfo(): Promise<DelegatedVoteInfo>;
}
