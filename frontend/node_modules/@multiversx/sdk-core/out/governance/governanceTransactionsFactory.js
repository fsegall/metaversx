"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GovernanceTransactionsFactory = void 0;
const abi_1 = require("../abi");
const core_1 = require("../core");
const constants_1 = require("../core/constants");
const transactionBuilder_1 = require("../core/transactionBuilder");
const EXTRA_GAS_LIMIT_FOR_VOTING = 100000n;
class GovernanceTransactionsFactory {
    constructor(options) {
        this.config = options.config;
        this.argSerializer = new abi_1.ArgSerializer();
        this.governanceContract = core_1.Address.newFromHex(constants_1.GOVERNANCE_CONTRACT_ADDRESS_HEX, this.config.addressHrp);
    }
    createTransactionForNewProposal(sender, options) {
        const args = [
            new abi_1.StringValue(options.commitHash),
            new abi_1.BigUIntValue(options.startVoteEpoch),
            new abi_1.BigUIntValue(options.endVoteEpoch),
        ];
        const dataParts = ["proposal", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForProposal,
            addDataMovementGas: true,
            amount: options.nativeTokenAmount,
        }).build();
    }
    createTransactionForVoting(sender, options) {
        const args = [new abi_1.BigUIntValue(options.proposalNonce), new abi_1.StringValue(options.vote.valueOf())];
        const dataParts = ["vote", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForVote + EXTRA_GAS_LIMIT_FOR_VOTING,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForClosingProposal(sender, options) {
        const args = [new abi_1.BigUIntValue(options.proposalNonce)];
        const dataParts = ["closeProposal", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForClosingProposal,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForClearingEndedProposals(sender, options) {
        const dataParts = ["clearEndedProposals", ...options.proposers.map((address) => address.toHex())];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForClearProposals +
                BigInt(options.proposers.length) * this.config.gasLimitForClearProposals,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForClaimingAccumulatedFees(sender) {
        const dataParts = ["claimAccumulatedFees"];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForClaimAccumulatedFees,
            addDataMovementGas: true,
        }).build();
    }
    createTransactionForChangingConfig(sender, options) {
        const args = [
            new abi_1.StringValue(options.proposalFee.toString()),
            new abi_1.StringValue(options.lastProposalFee.toString()),
            new abi_1.StringValue(options.minQuorum.toString()),
            new abi_1.StringValue(options.minVetoThreshold.toString()),
            new abi_1.StringValue(options.minPassThreshold.toString()),
        ];
        const dataParts = ["changeConfig", ...this.argSerializer.valuesToStrings(args)];
        return new transactionBuilder_1.TransactionBuilder({
            config: this.config,
            sender: sender,
            receiver: this.governanceContract,
            dataParts: dataParts,
            gasLimit: this.config.gasLimitForChangeConfig,
            addDataMovementGas: true,
        }).build();
    }
}
exports.GovernanceTransactionsFactory = GovernanceTransactionsFactory;
//# sourceMappingURL=governanceTransactionsFactory.js.map