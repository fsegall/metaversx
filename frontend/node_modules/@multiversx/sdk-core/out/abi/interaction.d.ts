import { Account } from "../accounts";
import { Address } from "../core/address";
import { TokenTransfer } from "../core/tokens";
import { Transaction } from "../core/transaction";
import { ContractFunction } from "./function";
import { CallArguments } from "./interface";
import { Query } from "./query";
import { EndpointDefinition, TypedValue } from "./typesystem";
/**
 * Internal interface: the smart contract, as seen from the perspective of an {@link Interaction}.
 */
interface ISmartContractWithinInteraction {
    call({ func, args, value, gasLimit, receiver }: CallArguments): Transaction;
    getAddress(): Address;
    getEndpoint(name: ContractFunction): EndpointDefinition;
}
/**
 * @deprecated component. Use "SmartContractTransactionsFactory" or "SmartContractController", instead.
 *
 * Interactions can be seen as mutable transaction & query builders.
 *
 * Aside from building transactions and queries, the interactors are also responsible for interpreting
 * the execution outcome for the objects they've built.
 */
export declare class Interaction {
    private readonly contract;
    private readonly function;
    private readonly args;
    private nonce;
    private value;
    private gasLimit;
    private gasPrice;
    private chainID;
    private querent;
    private explicitReceiver?;
    private sender;
    private version;
    private tokenTransfers;
    constructor(contract: ISmartContractWithinInteraction, func: ContractFunction, args: TypedValue[]);
    getContractAddress(): Address;
    getFunction(): ContractFunction;
    getEndpoint(): EndpointDefinition;
    getArguments(): TypedValue[];
    getValue(): bigint;
    getTokenTransfers(): TokenTransfer[];
    getGasLimit(): bigint;
    getExplicitReceiver(): Address | undefined;
    buildTransaction(): Transaction;
    buildQuery(): Query;
    withValue(value: bigint): Interaction;
    withSingleESDTTransfer(transfer: TokenTransfer): Interaction;
    withSingleESDTNFTTransfer(transfer: TokenTransfer): Interaction;
    withMultiESDTNFTTransfer(transfers: TokenTransfer[]): Interaction;
    withGasLimit(gasLimit: bigint): Interaction;
    withGasPrice(gasPrice: bigint): Interaction;
    withNonce(nonce: bigint): Interaction;
    useThenIncrementNonceOf(account: Account): Interaction;
    withChainID(chainID: string): Interaction;
    withSender(sender: Address): Interaction;
    withVersion(version: number): Interaction;
    /**
     * Sets the "caller" field on contract queries.
     */
    withQuerent(querent: Address): Interaction;
    withExplicitReceiver(receiver: Address): Interaction;
}
export {};
