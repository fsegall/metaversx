"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransfersController = void 0;
const core_1 = require("../core");
const transferTransactionsFactory_1 = require("./transferTransactionsFactory");
class TransfersController extends core_1.BaseController {
    constructor(options) {
        super();
        this.factory = new transferTransactionsFactory_1.TransferTransactionsFactory({ config: new core_1.TransactionsFactoryConfig(options) });
    }
    async createTransactionForNativeTokenTransfer(sender, nonce, options) {
        const transaction = this.factory.createTransactionForNativeTokenTransfer(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForEsdtTokenTransfer(sender, nonce, options) {
        const transaction = this.factory.createTransactionForESDTTokenTransfer(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForTransfer(sender, nonce, options) {
        const transaction = this.factory.createTransactionForTransfer(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
}
exports.TransfersController = TransfersController;
//# sourceMappingURL=transfersControllers.js.map