import { Address } from "../core/address";
import { Transaction } from "../core/transaction";
import * as resources from "./resources";
interface IConfig {
    chainID: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitESDTTransfer: bigint;
    gasLimitESDTNFTTransfer: bigint;
    gasLimitMultiESDTNFTTransfer: bigint;
}
/**
 * Use this class to create transactions for native token transfers (EGLD) or custom tokens transfers (ESDT/NTF/MetaESDT).
 */
export declare class TransferTransactionsFactory {
    private readonly config?;
    private readonly tokenTransfersDataBuilder?;
    private readonly tokenComputer?;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForNativeTokenTransfer(sender: Address, options: resources.NativeTokenTransferInput): Transaction;
    createTransactionForESDTTokenTransfer(sender: Address, options: resources.CustomTokenTransferInput): Transaction;
    createTransactionForTransfer(sender: Address, options: resources.CreateTransferTransactionInput): Transaction;
    private createSingleESDTTransferTransaction;
    private buildTransferData;
    private buildMultiESDTNFTTransferData;
    private buildESDTTransferData;
    private buildSingleESDTNFTTransferData;
    private computeGasForMoveBalance;
}
export {};
