import { BaseController, BaseControllerInput, IAccount, Transaction, TransactionOnNetwork } from "../core";
import { INetworkProvider } from "../networkProviders/interface";
import * as resources from "./resources";
export declare class DelegationController extends BaseController {
    private transactionAwaiter;
    private factory;
    private parser;
    constructor(options: {
        chainID: string;
        networkProvider: INetworkProvider;
    });
    createTransactionForNewDelegationContract(sender: IAccount, nonce: bigint, options: resources.NewDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    awaitCompletedCreateNewDelegationContract(txHash: string): Promise<{
        contractAddress: string;
    }[]>;
    parseCreateNewDelegationContract(transactionOnNetwork: TransactionOnNetwork): {
        contractAddress: string;
    }[];
    createTransactionForAddingNodes(sender: IAccount, nonce: bigint, options: resources.AddNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForRemovingNodes(sender: IAccount, nonce: bigint, options: resources.ManageNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForStakingNodes(sender: IAccount, nonce: bigint, options: resources.ManageNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUnbondingNodes(sender: IAccount, nonce: bigint, options: resources.ManageNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUnstakingNodes(sender: IAccount, nonce: bigint, options: resources.ManageNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUnjailingNodes(sender: IAccount, nonce: bigint, options: resources.UnjailingNodesInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForChangingServiceFee(sender: IAccount, nonce: bigint, options: resources.ChangeServiceFee & BaseControllerInput): Promise<Transaction>;
    createTransactionForModifyingDelegationCap(sender: IAccount, nonce: bigint, options: resources.ModifyDelegationCapInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForSettingAutomaticActivation(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUnsettingAutomaticActivation(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForSettingCapCheckOnRedelegateRewards(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUnsettingCapCheckOnRedelegateRewards(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForSettingMetadata(sender: IAccount, nonce: bigint, options: resources.SetContractMetadataInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForDelegating(sender: IAccount, nonce: bigint, options: resources.DelegateActionsInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForClaimingRewards(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForRedelegatingRewards(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForUndelegating(sender: IAccount, nonce: bigint, options: resources.DelegateActionsInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForWithdrawing(sender: IAccount, nonce: bigint, options: resources.ManageDelegationContractInput & BaseControllerInput): Promise<Transaction>;
}
