"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegationController = void 0;
const core_1 = require("../core");
const delegationTransactionsFactory_1 = require("./delegationTransactionsFactory");
const delegationTransactionsOutcomeParser_1 = require("./delegationTransactionsOutcomeParser");
class DelegationController extends core_1.BaseController {
    constructor(options) {
        super();
        this.transactionAwaiter = new core_1.TransactionWatcher(options.networkProvider);
        this.factory = new delegationTransactionsFactory_1.DelegationTransactionsFactory({
            config: new core_1.TransactionsFactoryConfig({ chainID: options.chainID }),
        });
        this.parser = new delegationTransactionsOutcomeParser_1.DelegationTransactionsOutcomeParser();
    }
    async createTransactionForNewDelegationContract(sender, nonce, options) {
        const transaction = this.factory.createTransactionForNewDelegationContract(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async awaitCompletedCreateNewDelegationContract(txHash) {
        const transaction = await this.transactionAwaiter.awaitCompleted(txHash);
        return this.parseCreateNewDelegationContract(transaction);
    }
    parseCreateNewDelegationContract(transactionOnNetwork) {
        return this.parser.parseCreateNewDelegationContract(transactionOnNetwork);
    }
    async createTransactionForAddingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForAddingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForRemovingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForRemovingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForStakingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForStakingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnbondingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnbondingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnstakingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnstakingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnjailingNodes(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnjailingNodes(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForChangingServiceFee(sender, nonce, options) {
        const transaction = this.factory.createTransactionForChangingServiceFee(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForModifyingDelegationCap(sender, nonce, options) {
        const transaction = this.factory.createTransactionForModifyingDelegationCap(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForSettingAutomaticActivation(sender, nonce, options) {
        const transaction = this.factory.createTransactionForSettingAutomaticActivation(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnsettingAutomaticActivation(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnsettingAutomaticActivation(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForSettingCapCheckOnRedelegateRewards(sender, nonce, options) {
        const transaction = this.factory.createTransactionForSettingCapCheckOnRedelegateRewards(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnsettingCapCheckOnRedelegateRewards(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnsettingCapCheckOnRedelegateRewards(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForSettingMetadata(sender, nonce, options) {
        const transaction = this.factory.createTransactionForSettingMetadata(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForDelegating(sender, nonce, options) {
        const transaction = this.factory.createTransactionForDelegating(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForClaimingRewards(sender, nonce, options) {
        const transaction = this.factory.createTransactionForClaimingRewards(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForRedelegatingRewards(sender, nonce, options) {
        const transaction = this.factory.createTransactionForRedelegatingRewards(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUndelegating(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUndelegating(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForWithdrawing(sender, nonce, options) {
        const transaction = this.factory.createTransactionForWithdrawing(sender.address, options);
        transaction.nonce = nonce;
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
}
exports.DelegationController = DelegationController;
//# sourceMappingURL=delegationController.js.map