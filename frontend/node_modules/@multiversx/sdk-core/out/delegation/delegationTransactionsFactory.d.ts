import { Address } from "../core/address";
import { Transaction } from "../core/transaction";
import * as resources from "./resources";
interface IConfig {
    chainID: string;
    addressHrp: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitStake: bigint;
    gasLimitUnstake: bigint;
    gasLimitUnbond: bigint;
    gasLimitCreateDelegationContract: bigint;
    gasLimitDelegationOperations: bigint;
    additionalGasLimitPerValidatorNode: bigint;
    additionalGasLimitForDelegationOperations: bigint;
}
/**
 * Use this class to create delegation related transactions like creating a new delegation contract or adding nodes.
 */
export declare class DelegationTransactionsFactory {
    private readonly config;
    private readonly argSerializer;
    private readonly delegationManagerAddress;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForNewDelegationContract(sender: Address, options: resources.NewDelegationContractInput): Transaction;
    createTransactionForAddingNodes(sender: Address, options: resources.AddNodesInput): Transaction;
    createTransactionForRemovingNodes(sender: Address, options: resources.ManageNodesInput): Transaction;
    createTransactionForStakingNodes(sender: Address, options: resources.ManageNodesInput): Transaction;
    createTransactionForUnbondingNodes(sender: Address, options: resources.ManageNodesInput): Transaction;
    createTransactionForUnstakingNodes(sender: Address, options: resources.ManageNodesInput): Transaction;
    createTransactionForUnjailingNodes(sender: Address, options: resources.UnjailingNodesInput): Transaction;
    createTransactionForChangingServiceFee(sender: Address, options: resources.ChangeServiceFee): Transaction;
    createTransactionForModifyingDelegationCap(sender: Address, options: resources.ModifyDelegationCapInput): Transaction;
    createTransactionForSettingAutomaticActivation(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForUnsettingAutomaticActivation(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForSettingCapCheckOnRedelegateRewards(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForUnsettingCapCheckOnRedelegateRewards(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForSettingMetadata(sender: Address, options: resources.SetContractMetadataInput): Transaction;
    createTransactionForDelegating(sender: Address, options: resources.DelegateActionsInput): Transaction;
    createTransactionForClaimingRewards(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForRedelegatingRewards(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    createTransactionForUndelegating(sender: Address, options: resources.DelegateActionsInput): Transaction;
    createTransactionForWithdrawing(sender: Address, options: resources.ManageDelegationContractInput): Transaction;
    private computeExecutionGasLimitForNodesManagement;
}
export {};
