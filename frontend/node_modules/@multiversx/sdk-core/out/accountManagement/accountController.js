"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountController = void 0;
const core_1 = require("../core");
const transactionsFactoryConfig_1 = require("../core/transactionsFactoryConfig");
const accountTransactionsFactory_1 = require("./accountTransactionsFactory");
class AccountController extends core_1.BaseController {
    constructor(options) {
        super();
        this.factory = new accountTransactionsFactory_1.AccountTransactionsFactory({
            config: new transactionsFactoryConfig_1.TransactionsFactoryConfig(options),
        });
    }
    async createTransactionForSavingKeyValue(sender, nonce, options) {
        const transaction = this.factory.createTransactionForSavingKeyValue(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForSettingGuardian(sender, nonce, options) {
        const transaction = this.factory.createTransactionForSettingGuardian(sender.address, options);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForGuardingAccount(sender, nonce, options) {
        const transaction = this.factory.createTransactionForGuardingAccount(sender.address);
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
    async createTransactionForUnguardingAccount(sender, nonce, options) {
        const transaction = this.factory.createTransactionForUnguardingAccount(sender.address);
        transaction.guardian = options.guardian ?? core_1.Address.empty();
        transaction.relayer = options.relayer ?? core_1.Address.empty();
        transaction.nonce = nonce;
        this.setTransactionGasOptions(transaction, options);
        this.setVersionAndOptionsForGuardian(transaction);
        transaction.signature = await sender.signTransaction(transaction);
        return transaction;
    }
}
exports.AccountController = AccountController;
//# sourceMappingURL=accountController.js.map