import { Address } from "../core/address";
import { Transaction } from "../core/transaction";
import { SaveKeyValueInput, SetGuardianInput } from "./resources";
interface IConfig {
    chainID: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitSaveKeyValue: bigint;
    gasLimitPersistPerByte: bigint;
    gasLimitStorePerByte: bigint;
    gasLimitSetGuardian: bigint;
    gasLimitGuardAccount: bigint;
    gasLimitUnguardAccount: bigint;
}
export declare class AccountTransactionsFactory {
    private readonly config;
    constructor(options: {
        config: IConfig;
    });
    createTransactionForSavingKeyValue(sender: Address, options: SaveKeyValueInput): Transaction;
    private computeExtraGasForSavingKeyValue;
    private computeDataPartsForSavingKeyValue;
    createTransactionForSettingGuardian(sender: Address, options: SetGuardianInput): Transaction;
    createTransactionForGuardingAccount(sender: Address): Transaction;
    createTransactionForUnguardingAccount(sender: Address): Transaction;
}
export {};
