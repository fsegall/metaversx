import { Address, BaseController, BaseControllerInput } from "../core";
import { IAccount } from "../core/interfaces";
import { Transaction } from "../core/transaction";
import { SaveKeyValueInput, SetGuardianInput } from "./resources";
export declare class AccountController extends BaseController {
    private factory;
    constructor(options: {
        chainID: string;
    });
    createTransactionForSavingKeyValue(sender: IAccount, nonce: bigint, options: SaveKeyValueInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForSettingGuardian(sender: IAccount, nonce: bigint, options: SetGuardianInput & BaseControllerInput): Promise<Transaction>;
    createTransactionForGuardingAccount(sender: IAccount, nonce: bigint, options: {
        relayer?: Address;
        gasPrice?: bigint;
        gasLimit?: bigint;
    }): Promise<Transaction>;
    createTransactionForUnguardingAccount(sender: IAccount, nonce: bigint, options: BaseControllerInput): Promise<Transaction>;
}
