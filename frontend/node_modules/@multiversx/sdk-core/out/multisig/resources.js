"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCUpgradeFromSource = exports.SCDeployFromSource = exports.SendAsyncCall = exports.SendTransferExecuteEsdt = exports.SendTransferExecuteEgld = exports.ChangeQuorum = exports.RemoveUser = exports.AddProposer = exports.AddBoardMember = exports.MultisigAction = exports.MultisigActionEnum = exports.UserRoleEnum = void 0;
const core_1 = require("../core");
var UserRoleEnum;
(function (UserRoleEnum) {
    UserRoleEnum["None"] = "None";
    UserRoleEnum["Proposer"] = "Proposer";
    UserRoleEnum["BoardMember"] = "BoardMember";
})(UserRoleEnum = exports.UserRoleEnum || (exports.UserRoleEnum = {}));
var MultisigActionEnum;
(function (MultisigActionEnum) {
    MultisigActionEnum["Nothing"] = "Nothing";
    MultisigActionEnum["AddBoardMember"] = "AddBoardMember";
    MultisigActionEnum["AddProposer"] = "AddProposer";
    MultisigActionEnum["RemoveUser"] = "RemoveUser";
    MultisigActionEnum["ChangeQuorum"] = "ChangeQuorum";
    MultisigActionEnum["SendTransferExecuteEgld"] = "SendTransferExecuteEgld";
    MultisigActionEnum["SendTransferExecuteEsdt"] = "SendTransferExecuteEsdt";
    MultisigActionEnum["SendAsyncCall"] = "SendAsyncCall";
    MultisigActionEnum["SCDeployFromSource"] = "SCDeployFromSource";
    MultisigActionEnum["SCUpgradeFromSource"] = "SCUpgradeFromSource";
})(MultisigActionEnum = exports.MultisigActionEnum || (exports.MultisigActionEnum = {}));
class MultisigAction {
    constructor() {
        this.type = MultisigActionEnum.Nothing;
    }
}
exports.MultisigAction = MultisigAction;
class AddBoardMember extends MultisigAction {
    constructor(address) {
        super();
        this.type = MultisigActionEnum.AddBoardMember;
        this.address = address;
    }
}
exports.AddBoardMember = AddBoardMember;
class AddProposer extends MultisigAction {
    constructor(address) {
        super();
        this.type = MultisigActionEnum.AddProposer;
        this.address = address;
    }
}
exports.AddProposer = AddProposer;
class RemoveUser extends MultisigAction {
    constructor(address) {
        super();
        this.type = MultisigActionEnum.RemoveUser;
        this.type = MultisigActionEnum.RemoveUser;
        this.address = address;
    }
}
exports.RemoveUser = RemoveUser;
class ChangeQuorum extends MultisigAction {
    constructor(quorum) {
        super();
        this.type = MultisigActionEnum.ChangeQuorum;
        this.quorum = quorum;
    }
}
exports.ChangeQuorum = ChangeQuorum;
class SendTransferExecuteEgld extends MultisigAction {
    constructor(data) {
        super();
        this.type = MultisigActionEnum.SendTransferExecuteEgld;
        this.receiver = data.to;
        this.amount = BigInt(data.egld_amount?.toFixed() ?? 0);
        this.optionalGasLimit = BigInt(data.opt_gas_limit?.toFixed() ?? 0);
        this.functionName = data.endpoint_name.toString();
        this.arguments = data.arguments;
    }
}
exports.SendTransferExecuteEgld = SendTransferExecuteEgld;
class SendTransferExecuteEsdt extends MultisigAction {
    constructor(data) {
        super();
        this.type = MultisigActionEnum.SendTransferExecuteEsdt;
        this.receiver = data.to;
        this.tokens = data.tokens.map((token) => new core_1.TokenTransfer({
            token: new core_1.Token({ identifier: token.token_identifier, nonce: token.nonce }),
            amount: token.amount,
        }));
        this.optionalGasLimit = BigInt(data.opt_gas_limit.toFixed());
        this.funcionName = Buffer.from(data.endpoint_name.toString(), "hex").toString();
        this.arguments = data.arguments;
    }
}
exports.SendTransferExecuteEsdt = SendTransferExecuteEsdt;
class SendAsyncCall extends MultisigAction {
    constructor(data) {
        super();
        this.type = MultisigActionEnum.SendAsyncCall;
        this.receiver = data.to;
        this.amount = BigInt(data.egld_amount?.toFixed() ?? 0);
        this.optionalGasLimit = BigInt(data.opt_gas_limit?.toFixed() ?? 0);
        this.funcionName = data.endpoint_name.toString();
        this.arguments = data.arguments;
    }
}
exports.SendAsyncCall = SendAsyncCall;
class SCDeployFromSource extends MultisigAction {
    constructor(data) {
        super();
        this.type = MultisigActionEnum.SCDeployFromSource;
        this.sourceContract = data[1];
        this.amount = data[0];
        this.codeMetadata = data[2];
        this.arguments = data[3];
    }
}
exports.SCDeployFromSource = SCDeployFromSource;
class SCUpgradeFromSource extends MultisigAction {
    constructor(data) {
        super();
        this.type = MultisigActionEnum.SCUpgradeFromSource;
        this.destinationContract = data[0];
        this.amount = data[1];
        this.sourceContract = data[2];
        this.codeMetadata = data[3];
        this.arguments = data[4];
    }
}
exports.SCUpgradeFromSource = SCUpgradeFromSource;
//# sourceMappingURL=resources.js.map