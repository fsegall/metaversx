"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountStorage = exports.AccountStorageEntry = exports.Guardian = exports.GuardianData = exports.AccountOnNetwork = void 0;
const abi_1 = require("../abi");
const core_1 = require("../core");
const blocks_1 = require("./blocks");
/**
 * A plain view of an account, as queried from the Network.
 */
class AccountOnNetwork {
    constructor(init) {
        this.address = core_1.Address.empty();
        this.nonce = 0n;
        this.balance = 0n;
        this.userName = "";
        this.isGuarded = false;
        Object.assign(this, init);
    }
    static fromApiHttpResponse(payload) {
        const result = new AccountOnNetwork();
        result.address = payload["address"] ? new core_1.Address(payload["address"]) : core_1.Address.empty();
        result.nonce = BigInt(payload["nonce"] || 0);
        result.balance = BigInt(payload["balance"] || 0);
        result.userName = payload["username"] || undefined;
        result.contractCodeHash = payload["codeHash"] || "";
        result.contractCode = Buffer.from(payload["code"] || "");
        result.contractDeveloperReward = payload["developerReward"] || 0n;
        result.contractOwnerAddress = payload["ownerAddress"] ? new core_1.Address(payload["ownerAddress"]) : undefined;
        result.isContractUpgradable = Boolean(payload["isUpgradeable"]);
        result.isContractReadable = Boolean(payload["isReadable"]);
        result.isContractPayable = Boolean(payload["isPayable"]);
        result.isContractPayableByContract = Boolean(payload["isPayableBySmartContract"]);
        result.isGuarded = Boolean(payload["isGuarded"]);
        return result;
    }
    static fromProxyHttpResponse(payload) {
        const result = new AccountOnNetwork();
        result.address = payload["address"] ? new core_1.Address(payload["address"]) : core_1.Address.empty();
        result.nonce = BigInt(payload["nonce"] || 0);
        result.balance = BigInt(payload["balance"] || 0);
        result.userName = payload["username"] || undefined;
        const codeMetadata = payload["codeMetadata"] ?? null;
        result.isContractUpgradable = false;
        result.isContractReadable = false;
        result.isContractPayable = false;
        result.isContractPayableByContract = false;
        if (codeMetadata) {
            const metadataBuffer = Buffer.from(codeMetadata, "base64");
            const metadata = core_1.CodeMetadata.newFromBytes(metadataBuffer);
            result.isContractUpgradable = metadata.upgradeable;
            result.isContractReadable = metadata.readable;
            result.isContractPayable = metadata.payable;
            result.isContractPayableByContract = metadata.payableBySc;
        }
        result.contractCodeHash = payload["codeHash"] || "";
        result.contractCode = Buffer.from(payload["code"] || "");
        result.contractDeveloperReward = payload["developerReward"] || 0n;
        result.contractOwnerAddress = payload["ownerAddress"] ? new core_1.Address(payload["ownerAddress"]) : undefined;
        result.isGuarded = Boolean(payload["isGuarded"]);
        return result;
    }
}
exports.AccountOnNetwork = AccountOnNetwork;
class GuardianData {
    constructor(init) {
        this.guarded = false;
        Object.assign(this, init);
    }
    static fromHttpResponse(response) {
        const result = new GuardianData();
        result.guarded = response["guarded"] || false;
        if (response["activeGuardian"]) {
            result.activeGuardian = Guardian.fromHttpResponse(response["activeGuardian"]);
        }
        if (response["pendingGuardian"]) {
            result.pendingGuardian = Guardian.fromHttpResponse(response["pendingGuardian"]);
        }
        return result;
    }
    getCurrentGuardianAddress() {
        if (!this.guarded) {
            return undefined;
        }
        return this.activeGuardian?.address;
    }
}
exports.GuardianData = GuardianData;
class Guardian {
    constructor() {
        this.activationEpoch = 0;
        this.address = core_1.Address.empty();
        this.serviceUID = "";
    }
    static fromHttpResponse(responsePart) {
        const result = new Guardian();
        result.activationEpoch = Number(responsePart["activationEpoch"] || 0);
        result.address = new core_1.Address(responsePart["address"] || "");
        result.serviceUID = responsePart["serviceUID"] || "";
        return result;
    }
}
exports.Guardian = Guardian;
class AccountStorageEntry {
    constructor(init) {
        this.raw = {};
        this.address = core_1.Address.empty();
        this.key = "";
        this.value = "";
        Object.assign(this, init);
    }
    static fromHttpResponse(payload, key) {
        const result = new AccountStorageEntry();
        const value = payload["value"] || "";
        result.raw = payload;
        result.key = key;
        result.value = abi_1.BytesValue.fromHex(value).toString();
        return result;
    }
}
exports.AccountStorageEntry = AccountStorageEntry;
/**
 * A plain view of an account storage.
 */
class AccountStorage {
    constructor(init) {
        this.raw = {};
        this.entries = [];
        Object.assign(this, init);
    }
    static fromHttpResponse(payload) {
        let result = new AccountStorage();
        const pairs = payload["pairs"] || {};
        const entries = Object.entries(pairs).map(([key, value]) => {
            const decodedKey = Buffer.from(key, "hex").toString("utf8");
            const val = value ? value.toString() : "";
            const decodedValue = Buffer.from(val).toString();
            return new AccountStorageEntry({
                raw: { [key]: value },
                key: decodedKey,
                value: decodedValue,
            });
        });
        result.raw = payload;
        result.entries = entries;
        result.blockCoordinates = blocks_1.BlockCoordinates.fromHttpResponse(payload);
        return result;
    }
}
exports.AccountStorage = AccountStorage;
//# sourceMappingURL=accounts.js.map