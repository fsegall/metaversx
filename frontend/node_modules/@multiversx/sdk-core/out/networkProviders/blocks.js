"use strict";
/**
 * An object holding network status configuration parameters.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockCoordinates = exports.BlockOnNetwork = void 0;
class BlockOnNetwork {
    constructor() {
        /**
         * The raw data return by provider.
         */
        this.raw = {};
        /**
         * The shard number.
         */
        this.shard = 0;
        /**
         * The shard nonce.
         */
        this.nonce = 0n;
        /**
         * The block hash.
         */
        this.hash = "";
        /**
         * The block previous hash.
         */
        this.previousHash = "";
        /**
         * The block timestamp.
         */
        this.timestamp = 0;
        /**
         * The block timestamp.
         */
        this.round = 0;
        /**
         * The block timestamp.
         */
        this.epoch = 0;
    }
    /**
     * Constructs a configuration object from a HTTP response (as returned by the provider).
     */
    static fromHttpResponse(payload) {
        let blockOnNetwork = new BlockOnNetwork();
        blockOnNetwork.raw = payload;
        blockOnNetwork.shard = Number(payload["shard"]) ?? 0;
        blockOnNetwork.nonce = BigInt(payload["nonce"] ?? 0);
        blockOnNetwork.hash = payload["hash"] ?? "";
        blockOnNetwork.previousHash = payload["prevBlockHash"] ?? payload["prevHash"] ?? "";
        blockOnNetwork.timestamp = Number(payload["timestamp"] ?? 0);
        blockOnNetwork.round = Number(payload["round"] ?? 0);
        blockOnNetwork.epoch = Number(payload["epoch"] ?? 0);
        return blockOnNetwork;
    }
}
exports.BlockOnNetwork = BlockOnNetwork;
class BlockCoordinates {
    constructor(init) {
        this.nonce = 0n;
        this.hash = "";
        this.rootHash = "";
        Object.assign(this, init);
    }
    static fromHttpResponse(payload) {
        const result = new BlockCoordinates();
        const value = payload["blockInfo"] || {};
        result.nonce = value["nonce"] || 0n;
        result.hash = value["hash"] || "";
        result.rootHash = value["rootHash"] || "";
        return result;
    }
}
exports.BlockCoordinates = BlockCoordinates;
//# sourceMappingURL=blocks.js.map