import { Address } from "../core";
import { BlockCoordinates } from "./blocks";
/**
 * A plain view of an account, as queried from the Network.
 */
export declare class AccountOnNetwork {
    address: Address;
    nonce: bigint;
    balance: bigint;
    userName: string;
    contractCodeHash?: string;
    contractCode?: Uint8Array;
    contractDeveloperReward?: bigint;
    contractOwnerAddress?: Address;
    isContractUpgradable?: boolean;
    isContractReadable?: boolean;
    isContractPayable?: boolean;
    isContractPayableByContract?: boolean;
    isGuarded: boolean;
    constructor(init?: Partial<AccountOnNetwork>);
    static fromApiHttpResponse(payload: any): AccountOnNetwork;
    static fromProxyHttpResponse(payload: any): AccountOnNetwork;
}
export declare class GuardianData {
    guarded: boolean;
    activeGuardian?: Guardian;
    pendingGuardian?: Guardian;
    constructor(init?: Partial<GuardianData>);
    static fromHttpResponse(response: any): GuardianData;
    getCurrentGuardianAddress(): Address | undefined;
}
export declare class Guardian {
    activationEpoch: number;
    address: Address;
    serviceUID: string;
    static fromHttpResponse(responsePart: any): Guardian;
}
export declare class AccountStorageEntry {
    raw: Record<string, any>;
    address: Address;
    key: string;
    value: string;
    constructor(init?: Partial<AccountStorageEntry>);
    static fromHttpResponse(payload: any, key: string): AccountStorageEntry;
}
/**
 * A plain view of an account storage.
 */
export declare class AccountStorage {
    raw: Record<string, any>;
    blockCoordinates: BlockCoordinates;
    entries: AccountStorageEntry[];
    constructor(init?: Partial<AccountStorage>);
    static fromHttpResponse(payload: any): AccountStorage;
}
