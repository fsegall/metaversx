/// <reference types="node" />
import { BigNumber } from "bignumber.js";
import { Address, Token } from "../core";
import { BlockCoordinates } from "./blocks";
export declare class FungibleTokenOfAccountOnNetwork {
    identifier: string;
    balance: BigNumber;
    rawResponse: any;
    static fromHttpResponse(payload: any): FungibleTokenOfAccountOnNetwork;
}
export declare class NonFungibleTokenOfAccountOnNetwork {
    identifier: string;
    collection: string;
    timestamp: number;
    attributes: Buffer;
    nonce: number;
    type: string;
    name: string;
    creator: Address;
    supply: BigNumber;
    decimals: number;
    royalties: BigNumber;
    assets: string[];
    balance: BigNumber;
    constructor(init?: Partial<NonFungibleTokenOfAccountOnNetwork>);
    static fromProxyHttpResponse(payload: any): NonFungibleTokenOfAccountOnNetwork;
    static fromProxyHttpResponseByNonce(payload: any): NonFungibleTokenOfAccountOnNetwork;
    static fromApiHttpResponse(payload: any): NonFungibleTokenOfAccountOnNetwork;
    private static fromHttpResponse;
    private static parseCollectionFromIdentifier;
}
export declare class TokenAmountOnNetwork {
    raw: Record<string, any>;
    token: Token;
    amount: bigint;
    block_coordinates?: BlockCoordinates;
    constructor(init?: Partial<TokenAmountOnNetwork>);
    static fromProxyResponse(payload: any): TokenAmountOnNetwork;
    static fromApiResponse(payload: any): TokenAmountOnNetwork;
}
