"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiNetworkProvider = void 0;
const core_1 = require("../core");
const constants_1 = require("../core/constants");
const accountAwaiter_1 = require("./accountAwaiter");
const accounts_1 = require("./accounts");
const blocks_1 = require("./blocks");
const config_1 = require("./config");
const constants_2 = require("./constants");
const contractQueryRequest_1 = require("./contractQueryRequest");
const proxyNetworkProvider_1 = require("./proxyNetworkProvider");
const resources_1 = require("./resources");
const tokenDefinitions_1 = require("./tokenDefinitions");
const tokens_1 = require("./tokens");
const userAgent_1 = require("./userAgent");
// TODO: Find & remove duplicate code between "ProxyNetworkProvider" and "ApiNetworkProvider".
class ApiNetworkProvider {
    constructor(url, config) {
        this.userAgentPrefix = `${constants_2.BaseUserAgent}/api`;
        this.url = url;
        const proxyConfig = this.getProxyConfig(config);
        this.config = { ...config_1.defaultAxiosConfig, ...config };
        this.backingProxyNetworkProvider = new proxyNetworkProvider_1.ProxyNetworkProvider(url, proxyConfig);
        this.axios = core_1.getAxios();
        userAgent_1.extendUserAgentIfBackend(this.userAgentPrefix, this.config);
    }
    getProxyConfig(config) {
        let proxyConfig = JSON.parse(JSON.stringify(config || {}));
        proxyConfig = { ...config_1.defaultAxiosConfig, ...proxyConfig };
        return proxyConfig;
    }
    async getNetworkConfig() {
        return await this.backingProxyNetworkProvider.getNetworkConfig();
    }
    async getNetworkStatus(shard = constants_1.METACHAIN_ID) {
        return await this.backingProxyNetworkProvider.getNetworkStatus(shard);
    }
    async getBlock(blockHash) {
        const response = await this.doGetGeneric(`blocks/${blockHash}`);
        return blocks_1.BlockOnNetwork.fromHttpResponse(response);
    }
    async getLatestBlock() {
        const response = await this.doGetGeneric("blocks/latest");
        return blocks_1.BlockOnNetwork.fromHttpResponse(response);
    }
    async getAccount(address) {
        const response = await this.doGetGeneric(`accounts/${address.toBech32()}`);
        const account = accounts_1.AccountOnNetwork.fromApiHttpResponse(response);
        return account;
    }
    async getAccountStorage(address) {
        const response = await this.doGetGeneric(`address/${address.toBech32()}/keys`);
        const account = accounts_1.AccountStorage.fromHttpResponse(response.data);
        return account;
    }
    async getAccountStorageEntry(address, entryKey) {
        const keyAsHex = Buffer.from(entryKey).toString("hex");
        const response = await this.doGetGeneric(`address/${address.toBech32()}/key/${keyAsHex}`);
        const account = accounts_1.AccountStorageEntry.fromHttpResponse(response.data, entryKey);
        return account;
    }
    async awaitAccountOnCondition(address, condition, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new accountAwaiter_1.AccountAwaiter({
            fetcher: this,
            patienceTimeInMilliseconds: options.patienceInMilliseconds,
            pollingIntervalInMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutIntervalInMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitOnCondition(address, condition);
    }
    async sendTransaction(tx) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        const response = await this.doPostGeneric("transactions", transaction);
        return response.txHash;
    }
    async simulateTransaction(tx, checkSignature = false) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        let url = "transaction/simulate?checkSignature=false";
        if (checkSignature) {
            url = "transaction/simulate";
        }
        const response = await this.doPostGeneric(url, transaction);
        const data = response["data"] ?? {};
        return core_1.TransactionOnNetwork.fromSimulateResponse(transaction, data["result"] ?? {});
    }
    async estimateTransactionCost(tx) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        const response = await this.doPostGeneric("transaction/cost", transaction);
        return resources_1.TransactionCostResponse.fromHttpResponse(response.data);
    }
    async sendTransactions(txs) {
        const data = txs.map((tx) => core_1.prepareTransactionForBroadcasting(tx));
        const response = await this.doPostGeneric("transaction/send-multiple", data);
        const numSent = Number(response.data["numOfSentTxs"] ?? 0);
        const hashes = Array(txs.length).fill(null);
        for (let i = 0; i < txs.length; i++) {
            hashes[i] = response.data.txsHashes[i.toString()] || null;
        }
        return [numSent, hashes];
    }
    async getTransaction(txHash) {
        const response = await this.doGetGeneric(`transactions/${txHash}`);
        const transaction = core_1.TransactionOnNetwork.fromApiHttpResponse(txHash, response);
        return transaction;
    }
    async getTransactions(address) {
        const response = await this.doGetGeneric(`accounts/${address.toBech32()}/transactions`);
        const transactions = response.map((item) => core_1.TransactionOnNetwork.fromApiHttpResponse(item.txHash, item));
        return transactions;
    }
    async getTransactionStatus(txHash) {
        const response = await this.doGetGeneric(`transactions/${txHash}?fields=status`);
        const status = new core_1.TransactionStatus(response.status);
        return status;
    }
    async awaitTransactionOnCondition(transactionHash, condition, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new core_1.TransactionWatcher(this, {
            patienceMilliseconds: options.patienceInMilliseconds,
            pollingIntervalMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitOnCondition(transactionHash, condition);
    }
    async awaitTransactionCompleted(transactionHash, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new core_1.TransactionWatcher(this, {
            patienceMilliseconds: options.patienceInMilliseconds,
            pollingIntervalMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitCompleted(transactionHash);
    }
    async getTokenOfAccount(address, token) {
        let response;
        if (token.nonce === 0n) {
            response = await this.doGetGeneric(`accounts/${address.toBech32()}/tokens/${token.identifier}`);
        }
        else {
            const identifier = new core_1.TokenComputer().computeExtendedIdentifier(token);
            response = await this.doGetGeneric(`accounts/${address.toBech32()}/nfts/${identifier}`);
        }
        return tokens_1.TokenAmountOnNetwork.fromApiResponse(response);
    }
    async getFungibleTokensOfAccount(address, pagination) {
        pagination = pagination || config_1.defaultPagination;
        const url = `accounts/${address.toBech32()}/tokens?${this.buildPaginationParams(pagination)}`;
        const response = await this.doGetGeneric(url);
        const tokens = response.map((item) => tokens_1.TokenAmountOnNetwork.fromApiResponse(item));
        return tokens;
    }
    async getNonFungibleTokensOfAccount(address, pagination) {
        pagination = pagination || config_1.defaultPagination;
        const url = `accounts/${address.toBech32()}/nfts?${this.buildPaginationParams(pagination)}`;
        const response = await this.doGetGeneric(url);
        const tokens = response.map((item) => tokens_1.TokenAmountOnNetwork.fromApiResponse(item));
        return tokens;
    }
    async getDefinitionOfFungibleToken(tokenIdentifier) {
        const response = await this.doGetGeneric(`tokens/${tokenIdentifier}`);
        const definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromApiHttpResponse(response);
        return definition;
    }
    async getDefinitionOfTokenCollection(collection) {
        const response = await this.doGetGeneric(`collections/${collection}`);
        const definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromApiHttpResponse(response);
        return definition;
    }
    async queryContract(query) {
        try {
            const request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();
            const response = await this.doPostGeneric("query", request);
            return core_1.SmartContractQueryResponse.fromHttpResponse(response, query.function);
        }
        catch (error) {
            throw new core_1.ErrContractQuery(error);
        }
    }
    async doGetGeneric(resourceUrl) {
        const response = await this.doGet(resourceUrl);
        return response;
    }
    async doPostGeneric(resourceUrl, payload) {
        const response = await this.doPost(resourceUrl, payload);
        return response;
    }
    buildPaginationParams(pagination) {
        return `from=${pagination.from}&size=${pagination.size}`;
    }
    async doGet(resourceUrl) {
        const url = `${this.url}/${resourceUrl}`;
        try {
            const response = await this.axios.default.get(url, this.config);
            return response.data;
        }
        catch (error) {
            this.handleApiError(error, resourceUrl);
        }
    }
    async doPost(resourceUrl, payload) {
        const url = `${this.url}/${resourceUrl}`;
        try {
            const response = await this.axios.default.post(url, payload, {
                ...this.config,
                headers: {
                    "Content-Type": "application/json",
                    ...this.config.headers,
                },
            });
            const responsePayload = response.data;
            return responsePayload;
        }
        catch (error) {
            this.handleApiError(error, resourceUrl);
        }
    }
    handleApiError(error, resourceUrl) {
        if (!error.response) {
            throw new core_1.ErrNetworkProvider(resourceUrl, error.toString(), error);
        }
        const errorData = error.response.data;
        const originalErrorMessage = errorData.message || errorData.error || JSON.stringify(errorData);
        throw new core_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);
    }
}
exports.ApiNetworkProvider = ApiNetworkProvider;
//# sourceMappingURL=apiNetworkProvider.js.map