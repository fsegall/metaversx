"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyNetworkProvider = void 0;
const core_1 = require("../core");
const constants_1 = require("../core/constants");
const accountAwaiter_1 = require("./accountAwaiter");
const accounts_1 = require("./accounts");
const blocks_1 = require("./blocks");
const config_1 = require("./config");
const constants_2 = require("./constants");
const contractQueryRequest_1 = require("./contractQueryRequest");
const networkConfig_1 = require("./networkConfig");
const networkStatus_1 = require("./networkStatus");
const resources_1 = require("./resources");
const tokenDefinitions_1 = require("./tokenDefinitions");
const tokens_1 = require("./tokens");
const userAgent_1 = require("./userAgent");
// TODO: Find & remove duplicate code between "ProxyNetworkProvider" and "ApiNetworkProvider".
class ProxyNetworkProvider {
    constructor(url, config) {
        this.userAgentPrefix = `${constants_2.BaseUserAgent}/proxy`;
        this.url = url;
        this.config = { ...config_1.defaultAxiosConfig, ...config };
        this.axios = core_1.getAxios();
        userAgent_1.extendUserAgentIfBackend(this.userAgentPrefix, this.config);
    }
    async getNetworkConfig() {
        const response = await this.doGetGeneric("network/config");
        const networkConfig = networkConfig_1.NetworkConfig.fromHttpResponse(response.config);
        return networkConfig;
    }
    async getNetworkStatus(shard = constants_1.METACHAIN_ID) {
        const response = await this.doGetGeneric(`network/status/${shard}`);
        const networkStatus = networkStatus_1.NetworkStatus.fromHttpResponse(response.status);
        return networkStatus;
    }
    async getBlock(args) {
        let response;
        if (args.blockHash) {
            response = await this.doGetGeneric(`block/${args.shard}/by-hash/${args.blockHash}`);
        }
        else if (args.blockNonce) {
            response = await this.doGetGeneric(`block/${args.shard}/by-nonce/${args.blockNonce}`);
        }
        else
            throw new Error("Block hash or block nonce not provided.");
        return blocks_1.BlockOnNetwork.fromHttpResponse(response.block);
    }
    async getLatestBlock(shard = constants_1.METACHAIN_ID) {
        const blockNonce = (await this.getNetworkStatus(shard)).blockNonce;
        const response = await this.doGetGeneric(`block/${shard}/by-nonce/${blockNonce}`);
        return blocks_1.BlockOnNetwork.fromHttpResponse(response);
    }
    async getAccount(address) {
        const response = await this.doGetGeneric(`address/${address.toBech32()}`);
        const account = accounts_1.AccountOnNetwork.fromProxyHttpResponse(response.account);
        return account;
    }
    async getGuardianData(address) {
        const response = await this.doGetGeneric(`address/${address.toBech32()}/guardian-data`);
        const accountGuardian = accounts_1.GuardianData.fromHttpResponse(response.guardianData);
        return accountGuardian;
    }
    async getAccountStorage(address) {
        const response = await this.doGetGeneric(`address/${address.toBech32()}/keys`);
        const account = accounts_1.AccountStorage.fromHttpResponse(response);
        return account;
    }
    async getAccountStorageEntry(address, entryKey) {
        const keyAsHex = Buffer.from(entryKey).toString("hex");
        const response = await this.doGetGeneric(`address/${address.toBech32()}/key/${keyAsHex}`);
        const account = accounts_1.AccountStorageEntry.fromHttpResponse(response, entryKey);
        return account;
    }
    async awaitAccountOnCondition(address, condition, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new accountAwaiter_1.AccountAwaiter({
            fetcher: this,
            patienceTimeInMilliseconds: options.patienceInMilliseconds,
            pollingIntervalInMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutIntervalInMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitOnCondition(address, condition);
    }
    async sendTransaction(tx) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        const response = await this.doPostGeneric("transaction/send", transaction);
        return response.txHash;
    }
    async simulateTransaction(tx, checkSignature = false) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        let url = "transaction/simulate?checkSignature=false";
        if (checkSignature) {
            url = "transaction/simulate";
        }
        const response = await this.doPostGeneric(url, transaction);
        return core_1.TransactionOnNetwork.fromSimulateResponse(transaction, response["result"] ?? {});
    }
    async estimateTransactionCost(tx) {
        const transaction = core_1.prepareTransactionForBroadcasting(tx);
        const response = await this.doPostGeneric("transaction/cost", transaction);
        return resources_1.TransactionCostResponse.fromHttpResponse(response);
    }
    async sendTransactions(txs) {
        const data = txs.map((tx) => core_1.prepareTransactionForBroadcasting(tx));
        const response = await this.doPostGeneric("transaction/send-multiple", data);
        const numSent = Number(response["numOfSentTxs"] ?? 0);
        const hashes = Array(txs.length).fill(null);
        for (let i = 0; i < txs.length; i++) {
            hashes[i] = response.txsHashes[i.toString()] || null;
        }
        return [numSent, hashes];
    }
    async getTransaction(txHash) {
        const url = this.buildUrlWithQueryParameters(`transaction/${txHash}`, { withResults: "true" });
        const [data, status] = await Promise.all([this.doGetGeneric(url), this.getTransactionStatus(txHash)]);
        return core_1.TransactionOnNetwork.fromProxyHttpResponse(txHash, data.transaction, status);
    }
    async awaitTransactionOnCondition(transactionHash, condition, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new core_1.TransactionWatcher(this, {
            patienceMilliseconds: options.patienceInMilliseconds,
            pollingIntervalMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitOnCondition(transactionHash, condition);
    }
    async awaitTransactionCompleted(transactionHash, options) {
        if (!options) {
            options = new resources_1.AwaitingOptions();
        }
        const awaiter = new core_1.TransactionWatcher(this, {
            patienceMilliseconds: options.patienceInMilliseconds,
            pollingIntervalMilliseconds: options.pollingIntervalInMilliseconds,
            timeoutMilliseconds: options.timeoutInMilliseconds,
        });
        return await awaiter.awaitCompleted(transactionHash);
    }
    async getTokenOfAccount(address, token) {
        let response;
        if (token.nonce === 0n) {
            response = await this.doGetGeneric(`address/${address.toBech32()}/esdt/${token.identifier}`);
        }
        else {
            response = await this.doGetGeneric(`address/${address.toBech32()}/nft/${token.identifier}/nonce/${token.nonce}`);
        }
        return tokens_1.TokenAmountOnNetwork.fromProxyResponse(response["tokenData"]);
    }
    async getFungibleTokensOfAccount(address) {
        const url = `address/${address.toBech32()}/esdt`;
        const response = await this.doGetGeneric(url);
        const responseItems = Object.values(response.esdts);
        // Skip NFTs / SFTs.
        const responseItemsFiltered = responseItems.filter((item) => !item.nonce);
        const tokens = responseItemsFiltered.map((item) => tokens_1.TokenAmountOnNetwork.fromProxyResponse(item));
        return tokens;
    }
    async getNonFungibleTokensOfAccount(address) {
        const url = `address/${address.toBech32()}/esdt`;
        const response = await this.doGetGeneric(url);
        const responseItems = Object.values(response.esdts);
        // Skip fungible tokens.
        const responseItemsFiltered = responseItems.filter((item) => item.nonce >= 0);
        const tokens = responseItemsFiltered.map((item) => tokens_1.TokenAmountOnNetwork.fromProxyResponse(item));
        return tokens;
    }
    async getTransactionStatus(txHash) {
        const response = await this.doGetGeneric(`transaction/${txHash}/process-status`);
        const status = new core_1.TransactionStatus(response.status);
        return status;
    }
    async getDefinitionOfFungibleToken(tokenIdentifier) {
        const properties = await this.getTokenProperties(tokenIdentifier);
        const definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromResponseOfGetTokenProperties(tokenIdentifier, properties);
        return definition;
    }
    async queryContract(query) {
        try {
            const request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();
            const response = await this.doPostGeneric("vm-values/query", request);
            return core_1.SmartContractQueryResponse.fromHttpResponse(response.data, query.function);
        }
        catch (error) {
            throw new core_1.ErrContractQuery(error);
        }
    }
    async getTokenProperties(identifier) {
        const encodedIdentifier = Buffer.from(identifier);
        const queryResponse = await this.queryContract({
            contract: core_1.Address.newFromHex(constants_1.ESDT_CONTRACT_ADDRESS_HEX),
            function: "getTokenProperties",
            arguments: [new Uint8Array(encodedIdentifier)],
        });
        const properties = queryResponse.returnDataParts;
        return properties?.map((prop) => Buffer.from(prop));
    }
    async getDefinitionOfTokenCollection(collection) {
        const properties = await this.getTokenProperties(collection);
        const definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromResponseOfGetTokenProperties(collection, properties);
        return definition;
    }
    async doGetGeneric(resourceUrl) {
        const response = await this.doGet(resourceUrl);
        return response;
    }
    async doPostGeneric(resourceUrl, payload) {
        const response = await this.doPost(resourceUrl, payload);
        return response;
    }
    async doGet(resourceUrl) {
        const url = `${this.url}/${resourceUrl}`;
        try {
            const response = await this.axios.default.get(url, this.config);
            const payload = response.data.data;
            return payload;
        }
        catch (error) {
            this.handleApiError(error, resourceUrl);
        }
    }
    async doPost(resourceUrl, payload) {
        const url = `${this.url}/${resourceUrl}`;
        try {
            const response = await this.axios.default.post(url, payload, {
                ...this.config,
                headers: {
                    "Content-Type": "application/json",
                    ...this.config.headers,
                },
            });
            const responsePayload = response.data.data;
            return responsePayload;
        }
        catch (error) {
            this.handleApiError(error, resourceUrl);
        }
    }
    buildUrlWithQueryParameters(endpoint, params) {
        const searchParams = new URLSearchParams();
        for (let [key, value] of Object.entries(params)) {
            if (value) {
                searchParams.append(key, value);
            }
        }
        return `${endpoint}?${searchParams.toString()}`;
    }
    handleApiError(error, resourceUrl) {
        if (!error.response) {
            throw new core_1.ErrNetworkProvider(resourceUrl, error.toString(), error);
        }
        const errorData = error.response.data;
        const originalErrorMessage = errorData.message || errorData.error || JSON.stringify(errorData);
        throw new core_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);
    }
}
exports.ProxyNetworkProvider = ProxyNetworkProvider;
//# sourceMappingURL=proxyNetworkProvider.js.map