import BigNumber from "bignumber.js";
interface ILegacyTokenTransferOptions {
    tokenIdentifier: string;
    nonce: number;
    amountAsBigInteger: BigNumber.Value;
    numDecimals?: number;
}
export declare type TokenType = "NFT" | "SFT" | "META" | "FNG";
export declare class Token {
    /**
     * E.g. "FOO-abcdef", "EGLD-000000".
     */
    readonly identifier: string;
    readonly nonce: bigint;
    constructor(options: {
        identifier: string;
        nonce?: bigint;
    });
}
export declare class TokenTransfer {
    readonly token: Token;
    readonly amount: bigint;
    /**
     * @deprecated field. Use "token.identifier" instead.
     */
    readonly tokenIdentifier: string;
    /**
     * @deprecated field. Use "token.nonce" instead.
     */
    readonly nonce: number;
    /**
     * @deprecated field. Use "amount" instead.
     */
    readonly amountAsBigInteger: BigNumber;
    /**
     * @deprecated field. The number of decimals is not a concern of "sdk-core".
     * For formatting and parsing amounts, use "sdk-dapp" or "bignumber.js" directly.
     */
    readonly numDecimals: number;
    constructor(options: {
        token: Token;
        amount: bigint;
    } | ILegacyTokenTransferOptions);
    /**     *
     * @param amount
     * @returns @TokenTransfer from native token
     */
    static newFromNativeAmount(amount: bigint): TokenTransfer;
    private isLegacyTokenTransferOptions;
    /**
     * @deprecated Use {@link newFromNativeAmount} instead.
     */
    static egldFromAmount(amount: BigNumber.Value): TokenTransfer;
    /**
     * @deprecated Use {@link newFromNativeAmount} instead.
     */
    static egldFromBigInteger(amountAsBigInteger: BigNumber.Value): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static fungibleFromAmount(tokenIdentifier: string, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static fungibleFromBigInteger(tokenIdentifier: string, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static nonFungible(tokenIdentifier: string, nonce: number): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static semiFungible(tokenIdentifier: string, nonce: number, quantity: number): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static metaEsdtFromAmount(tokenIdentifier: string, nonce: number, amount: BigNumber.Value, numDecimals: number): TokenTransfer;
    /**
     * @deprecated Use the constructor instead: new TokenTransfer({ token, amount });
     */
    static metaEsdtFromBigInteger(tokenIdentifier: string, nonce: number, amountAsBigInteger: BigNumber.Value, numDecimals?: number): TokenTransfer;
    toString(): string;
    /**
     * @deprecated Use the "amount" field instead.
     */
    valueOf(): BigNumber;
    /**
     * @deprecated For formatting and parsing amounts, use "sdk-dapp" or "bignumber.js" directly.
     */
    toPrettyString(): string;
    private toAmount;
    /**
     * @deprecated Within your code, don't mix native values (EGLD) and custom (ESDT) tokens.
     * See "TransferTransactionsFactory.createTransactionForNativeTokenTransfer()" vs. "TransferTransactionsFactory.createTransactionForESDTTokenTransfer()".
     */
    isEgld(): boolean;
    /**
     * @deprecated Use "TokenComputer.isFungible(token)" instead.
     */
    isFungible(): boolean;
}
export declare class TokenComputer {
    TOKEN_RANDOM_SEQUENCE_LENGTH: number;
    constructor();
    /**
     * Returns token.nonce == 0
     */
    isFungible(token: Token): boolean;
    /**
     * Given "FOO-abcdef-0a" returns 10.
     */
    extractNonceFromExtendedIdentifier(identifier: string): number;
    /**
     * Given "FOO-abcdef-0a" returns FOO-abcdef.
     */
    extractIdentifierFromExtendedIdentifier(identifier: string): string;
    /**
     * Given "FOO-abcdef-0a" returns FOO.
     * Given "FOO-abcdef" returns FOO.
     */
    extractTickerFromExtendedIdentifier(identifier: string): string;
    computeExtendedIdentifier(token: Token): string;
    private validateExtendedIdentifier;
    private splitIdentifierIntoComponents;
    private checkIfExtendedIdentifierWasProvided;
    private checkLengthOfRandomSequence;
    private checkLengthOfPrefix;
    private ensureTokenTickerValidity;
}
export {};
