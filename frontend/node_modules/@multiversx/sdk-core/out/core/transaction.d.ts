/// <reference types="node" />
import { BigNumber } from "bignumber.js";
import { Address } from "./address";
import { INetworkConfig, IPlainTransactionObject } from "./interfaces";
/**
 * An abstraction for creating and signing transactions.
 */
export declare class Transaction {
    /**
     * The nonce of the transaction (the account sequence number of the sender).
     */
    nonce: bigint;
    /**
     * The value to transfer.
     */
    value: bigint;
    /**
     * The address of the sender.
     */
    sender: Address;
    /**
     * The address of the receiver.
     */
    receiver: Address;
    /**
     * The username of the sender.
     */
    senderUsername: string;
    /**
     * The username of the receiver.
     */
    receiverUsername: string;
    /**
     * The gas price to be used.
     */
    gasPrice: bigint;
    /**
     * The maximum amount of gas to be consumed when processing the transaction.
     */
    gasLimit: bigint;
    /**
     * The payload of the transaction.
     */
    data: Uint8Array;
    /**
     * The chain ID of the Network (e.g. "1" for Mainnet).
     */
    chainID: string;
    /**
     * The version, required by the Network in order to correctly interpret the contents of the transaction.
     */
    version: number;
    /**
     * The options field, useful for describing different settings available for transactions.
     */
    options: number;
    /**
     * The address of the guardian, in bech32 format.
     */
    guardian: Address;
    /**
     * The relayer address.
     *  Note: in the next major version, `sender`, `receiver` and `guardian` will also have the type `Address`, instead of `string`.
     */
    relayer: Address;
    /**
     * The signature.
     */
    signature: Uint8Array;
    /**
     * The signature of the guardian.
     */
    guardianSignature: Uint8Array;
    /**
     * The signature of the relayer.
     */
    relayerSignature: Uint8Array;
    /**
     * Creates a new Transaction object.
     */
    constructor(options: {
        nonce?: bigint;
        value?: bigint;
        sender: Address;
        receiver: Address;
        senderUsername?: string;
        receiverUsername?: string;
        gasPrice?: bigint;
        gasLimit: bigint;
        data?: Uint8Array;
        chainID: string;
        version?: number;
        options?: number;
        guardian?: Address;
        relayer?: Address;
        signature?: Uint8Array;
        guardianSignature?: Uint8Array;
        relayerSignature?: Uint8Array;
    });
    /**
     * @deprecated method, use {@link nonce} property instead.
     */
    getNonce(): bigint;
    /**
     * @deprecated method, use {@link nonce} property instead.
     * Sets the account sequence number of the sender. Must be done prior signing.
     */
    setNonce(nonce: bigint): void;
    /**
     * @deprecated method, use {@link value} property instead.
     */
    getValue(): bigint;
    /**
     * @deprecated method, use {@link value} property instead.
     */
    setValue(value: bigint): void;
    /**
     * @deprecated method, use {@link sender} property instead.
     */
    getSender(): Address;
    /**
     * @deprecated method, use {@link sender} property instead.
     */
    setSender(sender: Address): void;
    /**
     * @deprecated method, use {@link receiver} property instead.
     */
    getReceiver(): Address;
    /**
     * @deprecated method, use {@link senderUsername} property instead.
     */
    getSenderUsername(): string;
    /**
     * @deprecated method, use {@link senderUsername} property instead.
     */
    setSenderUsername(senderUsername: string): void;
    /**
     * @deprecated method, use {@link receiverUsername} property instead.
     */
    getReceiverUsername(): string;
    /**
     * @deprecated method, use {@link receiverUsername} property instead.
     */
    setReceiverUsername(receiverUsername: string): void;
    /**
     * @deprecated method, use {@link guardian} property instead.
     */
    getGuardian(): Address;
    /**
     * @deprecated method, use {@link gasPrice} property instead.
     */
    getGasPrice(): bigint;
    /**
     * @deprecated method, use {@link gasPrice} property instead.
     */
    setGasPrice(gasPrice: bigint): void;
    /**
     * @deprecated method, use {@link gasLimit} property instead.
     */
    getGasLimit(): bigint;
    /**
     * @deprecated method, use {@link gasLimit} property instead.
     */
    setGasLimit(gasLimit: bigint): void;
    /**
     * @deprecated method, use {@link data} property instead.
     */
    getData(): Uint8Array;
    /**
     * @deprecated method, use {@link chainID} property instead.
     */
    getChainID(): string;
    /**
     * @deprecated method, use {@link chainID} property instead.
     */
    setChainID(chainID: string): void;
    /**
     * @deprecated method, use {@link version} property instead.
     */
    getVersion(): number;
    /**
     * @deprecated method, use {@link version} property instead.
     */
    setVersion(version: number): void;
    /**
     * @deprecated method, use {@link options} property instead.
     */
    getOptions(): number;
    /**
     * @deprecated method, use {@link options} property instead.
     *
     * Question for review: check how the options are set by sdk-dapp, wallet, ledger, extension.
     */
    setOptions(options: number): void;
    /**
     * @deprecated method, use{@link signature} property instead.
     */
    getSignature(): Buffer;
    /**
     * @deprecated method, use {@link guardianSignature} property instead.
     */
    getGuardianSignature(): Buffer;
    /**
     * @deprecated method, use {@link guardian} property instead.
     */
    setGuardian(guardian: Address): void;
    /**
     * @deprecated method, use "TransactionComputer.computeBytesForSigning()" instead.
     * Serializes a transaction to a sequence of bytes, ready to be signed.
     * This function is called internally by signers.
     */
    serializeForSigning(): Buffer;
    /**
     * Checks the integrity of the guarded transaction
     */
    isGuardedTransaction(): boolean;
    /**
     * Converts the transaction object into a ready-to-serialize, plain JavaScript object.
     * This function is called internally within the signing procedure.
     */
    toPlainObject(): IPlainTransactionObject;
    /**
     * @deprecated method, use {@link toPlainObject} instead.
     * Converts a plain object transaction into a Transaction Object.
     *
     * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()
     */
    static fromPlainObject(plainObjectTransaction: IPlainTransactionObject): Transaction;
    /**
     * Converts a plain object transaction into a Transaction Object.
     *
     * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()
     */
    static newFromPlainObject(plainObjectTransaction: IPlainTransactionObject): Transaction;
    /**
     * @deprecated method, use {@link signature} property instead.
     * Applies the signature on the transaction.
     *
     * @param signature The signature, as computed by a signer.
     */
    applySignature(signature: Uint8Array): void;
    /**
     * @deprecated method, use {@link guardianSignature} property instead.
     * Applies the guardian signature on the transaction.
     *
     * @param guardianSignature The signature, as computed by a signer.
     */
    applyGuardianSignature(guardianSignature: Uint8Array): void;
    /**
     * Converts a transaction to a ready-to-broadcast object.
     * Called internally by the network provider.
     */
    toSendable(): any;
    /**
     * @deprecated method, use "TransactionComputer.computeTransactionFee()" instead.
     *
     * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties
     * @param networkConfig {@link NetworkConfig}
     */
    computeFee(networkConfig: INetworkConfig): BigNumber;
    private toBase64OrUndefined;
    private toHexOrUndefined;
}
