"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransfersDataBuilder = void 0;
const abi_1 = require("../abi");
const tokens_1 = require("./tokens");
class TokenTransfersDataBuilder {
    constructor() {
        this.tokenComputer = new tokens_1.TokenComputer();
        this.argsSerializer = new abi_1.ArgSerializer();
    }
    buildDataPartsForESDTTransfer(transfer) {
        const args = this.argsSerializer.valuesToStrings([
            new abi_1.TokenIdentifierValue(transfer.token.identifier),
            new abi_1.BigUIntValue(transfer.amount),
        ]);
        return ["ESDTTransfer", ...args];
    }
    buildDataPartsForSingleESDTNFTTransfer(transfer, receiver) {
        const token = transfer.token;
        const identifier = this.tokenComputer.extractIdentifierFromExtendedIdentifier(token.identifier);
        const args = this.argsSerializer.valuesToStrings([
            new abi_1.TokenIdentifierValue(identifier),
            new abi_1.BigUIntValue(token.nonce),
            new abi_1.BigUIntValue(transfer.amount),
            new abi_1.AddressValue(receiver),
        ]);
        return ["ESDTNFTTransfer", ...args];
    }
    buildDataPartsForMultiESDTNFTTransfer(receiver, transfers) {
        const argsTyped = [new abi_1.AddressValue(receiver), new abi_1.U32Value(transfers.length)];
        for (const transfer of transfers) {
            const identifier = this.tokenComputer.extractIdentifierFromExtendedIdentifier(transfer.token.identifier);
            argsTyped.push(...[
                new abi_1.TokenIdentifierValue(identifier),
                new abi_1.BigUIntValue(transfer.token.nonce),
                new abi_1.BigUIntValue(transfer.amount),
            ]);
        }
        const args = this.argsSerializer.valuesToStrings(argsTyped);
        return ["MultiESDTNFTTransfer", ...args];
    }
}
exports.TokenTransfersDataBuilder = TokenTransfersDataBuilder;
//# sourceMappingURL=tokenTransfersDataBuilder.js.map