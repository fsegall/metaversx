/// <reference types="node" />
import { SmartContractResult } from "../transactionsOutcomeParsers";
import { Address } from "./address";
import { Transaction } from "./transaction";
import { TransactionLogs } from "./transactionLogs";
import { TransactionStatus } from "./transactionStatus";
export declare function prepareTransactionForBroadcasting(transaction: Transaction): any;
export declare class TransactionOnNetwork {
    raw: Record<string, any>;
    isCompleted?: boolean;
    hash: string;
    type: string;
    nonce: bigint;
    round: bigint;
    epoch: number;
    value: bigint;
    receiver: Address;
    sender: Address;
    senderShard: number;
    receiverShard: number;
    gasLimit: bigint;
    gasPrice: bigint;
    function: string;
    data: Buffer;
    version: number;
    options: number;
    signature: Uint8Array;
    status: TransactionStatus;
    timestamp: number;
    miniblockHash: string;
    blockHash: string;
    smartContractResults: SmartContractResult[];
    logs: TransactionLogs;
    constructor(init?: Partial<TransactionOnNetwork>);
    static fromProxyHttpResponse(txHash: string, response: any, processStatus?: TransactionStatus | undefined): TransactionOnNetwork;
    static fromSimulateResponse(originalTx: Transaction, response: any): TransactionOnNetwork;
    static fromApiHttpResponse(txHash: string, response: any): TransactionOnNetwork;
    private static fromHttpResponse;
    getDateTime(): Date;
}
