"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringIsFloat = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("../constants");
const stringIsFloat = (amount) => {
    if (isNaN(amount)) {
        return false;
    }
    if (amount == null) {
        return false;
    }
    if (String(amount).includes('Infinity')) {
        return false;
    }
    // eslint-disable-next-line
    let [wholes, decimals] = amount.split('.');
    const LocalBigNumber = bignumber_js_1.default.clone();
    if (decimals) {
        const areAllNumbers = decimals
            .split('')
            .every((digit) => !isNaN(parseInt(digit)));
        LocalBigNumber.set({
            DECIMAL_PLACES: areAllNumbers
                ? decimals.length
                : bignumber_js_1.default.config().DECIMAL_PLACES
        });
        while (decimals.charAt(decimals.length - 1) === constants_1.ZERO) {
            decimals = decimals.slice(0, -1);
        }
    }
    const number = decimals ? [wholes, decimals].join('.') : wholes;
    const bNparsed = LocalBigNumber(number);
    const output = bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;
    return output;
};
exports.stringIsFloat = stringIsFloat;
//# sourceMappingURL=stringIsFloat.js.map