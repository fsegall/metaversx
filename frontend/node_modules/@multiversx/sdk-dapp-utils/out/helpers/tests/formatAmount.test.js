"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const formatAmount_1 = require("../formatAmount");
describe('formatAmount', () => {
    test('throws error for invalid input', () => {
        expect(() => (0, formatAmount_1.formatAmount)({ input: 'abc' })).toThrow('Invalid input');
        expect(() => (0, formatAmount_1.formatAmount)({ input: '1.23' })).toThrow('Invalid input');
        expect(() => (0, formatAmount_1.formatAmount)({ input: '-1.23' })).toThrow('Invalid input');
    });
    test('handles zero values', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '0' })).toBe('0');
        expect((0, formatAmount_1.formatAmount)({ input: '0', digits: 2 })).toBe('0');
    });
    test('formats positive integers', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000' })).toBe('1.0000');
        expect((0, formatAmount_1.formatAmount)({ input: '2000000000000000000' })).toBe('2.0000');
    });
    test('formats negative integers', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '-1000000000000000000' })).toBe('-1.0000');
        expect((0, formatAmount_1.formatAmount)({ input: '-2000000000000000000' })).toBe('-2.0000');
    });
    test('handles custom decimals', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000', decimals: 8 })).toBe('10000000000.0000');
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000', decimals: 4 })).toBe('100000000000000.0000');
        expect((0, formatAmount_1.formatAmount)({ input: '56817349973594872345', decimals: 18, digits: 4 })).toBe('56.8173');
    });
    test('handles custom digits', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000', digits: 2 })).toBe('1.00');
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000', digits: 4 })).toBe('1.0000');
    });
    test('adds commas when specified', () => {
        expect((0, formatAmount_1.formatAmount)({ input: '1000000000000000000000', addCommas: true })).toBe('1,000.0000');
        expect((0, formatAmount_1.formatAmount)({
            input: '1000000000000000000000',
            addCommas: true,
            digits: 2
        })).toBe('1,000.00');
    });
    test('handles showIsLessThanDecimalsLabel', () => {
        const input = '1000000000000000';
        expect((0, formatAmount_1.formatAmount)({
            input,
            showIsLessThanDecimalsLabel: true,
            digits: 2
        })).toBe('<0.01');
    });
    test('handles showLastNonZeroDecimal', () => {
        expect((0, formatAmount_1.formatAmount)({
            input: '1100000000000000000',
            showLastNonZeroDecimal: true,
            digits: 4
        })).toBe('1.1000');
        expect((0, formatAmount_1.formatAmount)({
            input: '1100000000000000000',
            showLastNonZeroDecimal: false,
            digits: 4
        })).toBe('1.1');
    });
});
//# sourceMappingURL=formatAmount.test.js.map