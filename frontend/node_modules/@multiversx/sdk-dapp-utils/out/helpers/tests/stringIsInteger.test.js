"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringIsInteger_1 = require("./../stringIsInteger");
describe('stringIsInteger tests', () => {
    it('allows valid numbers', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('1')).toBe(true);
        expect((0, stringIsInteger_1.stringIsInteger)('999999999999999999999')).toBe(true);
    });
    it('allows valid integer numbers', () => {
        expect((0, stringIsInteger_1.stringIsInteger)(1)).toBe(true);
        expect((0, stringIsInteger_1.stringIsInteger)(0)).toBe(true);
        // eslint-disable-next-line
        expect((0, stringIsInteger_1.stringIsInteger)(999999999999999999999)).toBe(false);
    });
    it('rejects float numbers', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('1.1')).toBe(false);
    });
    it('rejects strings', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('1a')).toBe(false);
    });
    it('rejects undefined', () => {
        expect((0, stringIsInteger_1.stringIsInteger)(undefined)).toBe(false);
    });
    it('rejects NaN', () => {
        expect((0, stringIsInteger_1.stringIsInteger)(NaN)).toBe(false);
    });
    it('rejects null', () => {
        expect((0, stringIsInteger_1.stringIsInteger)(null)).toBe(false);
    });
    it('rejects negative', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('-1')).toBe(false);
    });
    it('allows negative if specified', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('-1', false)).toBe(true);
        expect((0, stringIsInteger_1.stringIsInteger)('-3456000000000000000', false)).toBe(true);
    });
    it('denies string', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('null')).toBe(false);
    });
    it('denies leading 0', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('01')).toBe(false);
    });
    it('rejects explicit positive', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('+1')).toBe(false);
    });
    it('rejects hexa', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('0x69859')).toBe(false);
    });
    it('rejects exponential string', () => {
        expect((0, stringIsInteger_1.stringIsInteger)('1e20')).toBe(false);
    });
});
//# sourceMappingURL=stringIsInteger.test.js.map