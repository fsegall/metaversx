"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const recommendGasPrice_1 = require("../recommendGasPrice");
describe('recommendGasPrice', () => {
    const MIN_GAS_PRICE = 1000000000;
    describe('when ppu is 0 or undefined', () => {
        it('should return MIN_GAS_PRICE when ppu is 0', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 30,
                transactionGasLimit: 45000000,
                ppu: 0
            });
            expect(result).toBe(MIN_GAS_PRICE);
        });
        it('should return MIN_GAS_PRICE when ppu is undefined', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 30,
                transactionGasLimit: 45000000,
                ppu: undefined
            });
            expect(result).toBe(MIN_GAS_PRICE);
        });
    });
    describe('when using valid ppu values', () => {
        it('should calculate gas price correctly for small transactions', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 30,
                transactionGasLimit: 45000000,
                ppu: 11760000
            });
            expect(result).toBeGreaterThanOrEqual(MIN_GAS_PRICE);
            expect(result).toBeLessThanOrEqual(MIN_GAS_PRICE * 30);
        });
        it('should handle move balance transaction parameters', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 0,
                transactionGasLimit: 50000,
                ppu: 11760000
            });
            expect(result).toBeGreaterThanOrEqual(MIN_GAS_PRICE);
            expect(result).toBeLessThanOrEqual(MIN_GAS_PRICE * 30);
        });
        it('should handle xExchange swap transaction parameters', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 143,
                transactionGasLimit: 30000000,
                ppu: 1000000000
            });
            expect(result).toBeGreaterThanOrEqual(MIN_GAS_PRICE);
            expect(result).toBeLessThanOrEqual(MIN_GAS_PRICE * 30);
        });
    });
    describe('edge cases', () => {
        it('should handle large data length and small gas limit', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 600000000,
                transactionGasLimit: 100,
                ppu: 22760000
            });
            expect(result).toBeGreaterThanOrEqual(MIN_GAS_PRICE);
            expect(result).toBeLessThanOrEqual(MIN_GAS_PRICE * 30);
        });
        it('should handle small data length and large gas limit', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 100,
                transactionGasLimit: 600000000,
                ppu: 11760000
            });
            expect(result).toBeGreaterThanOrEqual(MIN_GAS_PRICE);
            expect(result).toBeLessThanOrEqual(MIN_GAS_PRICE * 30);
        });
    });
    describe('gas price boundaries', () => {
        it('should cap gas price at MAX_GAS_PRICE when calculated value exceeds maximum', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 30,
                transactionGasLimit: 45000000,
                ppu: 1000000000000 // Very high PPU to force MAX_GAS_PRICE
            });
            expect(result).toBe(MIN_GAS_PRICE * 30); // MAX_GAS_PRICE
        });
        it('should use MIN_GAS_PRICE when calculated value is below minimum', () => {
            const result = (0, recommendGasPrice_1.recommendGasPrice)({
                transactionDataLength: 30,
                transactionGasLimit: 45000000,
                ppu: 1 // Very low PPU to force MIN_GAS_PRICE
            });
            expect(result).toBe(MIN_GAS_PRICE);
        });
    });
});
//# sourceMappingURL=recommendGasPrice.test.js.map