"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringIsFloat_1 = require("../stringIsFloat");
describe('stringIsFloat tests', () => {
    it('rejects undefined', () => {
        expect((0, stringIsFloat_1.stringIsFloat)(undefined)).toBe(false);
    });
    it('rejects object', () => {
        expect((0, stringIsFloat_1.stringIsFloat)({})).toBe(false);
    });
    it('rejects null', () => {
        expect((0, stringIsFloat_1.stringIsFloat)(null)).toBe(false);
    });
    it('allows valid numbers', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('1')).toBe(true);
    });
    it('allows decimal numbers with zeros', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('0.1')).toBe(true);
        expect((0, stringIsFloat_1.stringIsFloat)('0.001')).toBe(true);
        expect((0, stringIsFloat_1.stringIsFloat)('0.0010000')).toBe(true);
    });
    it('allows large decimal places', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('999999999999999999999.123456789012345678')).toBe(true);
        expect((0, stringIsFloat_1.stringIsFloat)('0.111111111111111111')).toBe(true);
    });
    it('allows trailing 0', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('0.10')).toBe(true);
        expect((0, stringIsFloat_1.stringIsFloat)('10')).toBe(true);
    });
    it('denies negative numbers', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('-1')).toBe(false);
    });
    it('denies explicit positive', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('+1')).toBe(false);
    });
    it('denies leading 0', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('01')).toBe(false);
    });
    it('denies string', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('null')).toBe(false);
    });
    it('denies hexadecimal', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('0x2')).toBe(false);
    });
    it('denies exponential', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('1e2')).toBe(false);
    });
    it('denies caret separation', () => {
        expect((0, stringIsFloat_1.stringIsFloat)('100_200')).toBe(false);
    });
    it('denies NaN', () => {
        expect((0, stringIsFloat_1.stringIsFloat)(NaN)).toBe(false);
    });
    it('also denies caret separation', () => {
        expect((0, stringIsFloat_1.stringIsFloat)(Infinity)).toBe(false);
    });
});
//# sourceMappingURL=stringIsFloat.test.js.map